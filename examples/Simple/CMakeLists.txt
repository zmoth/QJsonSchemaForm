cmake_minimum_required(VERSION 3.10)

# 工程名称
project(Simple VERSION ${PROJECT_VERSION})
message(STATUS "${PROJECT_NAME} v${PROJECT_VERSION}")

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# qt
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets) # 识别是Qt6还是Qt5
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

file(GLOB_RECURSE SRCS *.cpp)
file(GLOB_RECURSE INCS *.hpp *.h)

# 添加配置头文件，将CMake中的版本等信息转换为头文件
configure_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/Config.h.in"
  "${CMAKE_CURRENT_BINARY_DIR}/${INSTALL_INCLUDEDIR}/Config.h"
)

# 制作可执行文件
add_executable(
  ${PROJECT_NAME}
  ${SRCS}
  ${INCS}
)

target_link_libraries(
  ${PROJECT_NAME}
  Qt${QT_VERSION_MAJOR}::Widgets
  QJsonSchemaForm
)

# 头文件路径
target_include_directories(
  ${PROJECT_NAME}
  PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/${INSTALL_INCLUDEDIR}>
  PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
  PRIVATE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
)

install(
  TARGETS ${PROJECT_NAME}
  RUNTIME DESTINATION CMAKE_RUNTIME_OUTPUT_DIRECTORY
  LIBRARY DESTINATION CMAKE_LIBRARY_OUTPUT_DIRECTORY
  ARCHIVE DESTINATION CMAKE_ARCHIVE_OUTPUT_DIRECTORY
  BUNDLE DESTINATION CMAKE_RUNTIME_OUTPUT_DIRECTORY
)
